{"version":3,"sources":["../../app-es6/controllers/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","resolve","reject","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","listaAtual","post","filter","some","negociacao","isEquals","negociacaoExistente","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","obterNegociacoes"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from '../services/ConnectionFactory';\r\nimport {Negociacao} from '../models/Negociacao';\r\nimport {NegociacaoDao} from '../DAO/NegociacaoDao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor(){\r\n        \r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(), \r\n            this.obterNegociacoesDaSemanaAnterior(), \r\n            this.obterNegociacoesDaSemanaRetrasada()]\r\n        // If ok then do this\r\n        )\r\n        .then(periodos => {\r\n            // Transform first your array into a usable array with elements. Flatting your array!\r\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), [])\r\n            return negociacoes;\r\n        })\r\n        // If there's an error to that\r\n        .catch(erro => {\r\n            throw new Error(erro)\r\n        });\r\n    }\r\n\r\n        obterNegociacoesDaSemana(){\r\n            \r\n            return new Promise((resolve, reject) => {\r\n                \r\n                this._http\r\n                .get('negociacoes/semana')\r\n                    .then(negociacoes => { \r\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                    })\r\n                    .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana');\r\n                    })\r\n            }); \r\n        }\r\n        \r\n        /* CALLBACK ERROR-FIST METHOD!!\r\n        // cb = call back function - Substituted by PROMISE PATTERN\r\n        obterNegociacoesDaSemana(){\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'negociacoes/semana');\r\n                xhr.onreadystatechange = () => {\r\n                    if(xhr.readyState == 4) {\r\n                        if (xhr.status == 200){ \r\n                            cb(null, JSON.parse(xhr.responseText)\r\n                                .map(objeto => \r\n                                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)\r\n                                ))\r\n                                \r\n                        } else {\r\n                            console.log(xhr.responseText);\r\n                            cb('Não foi possível obter as negociações', null);\r\n                        }\r\n                    }\r\n                };\r\n            xhr.send();\r\n        }\r\n        */\r\n\r\n        obterNegociacoesDaSemanaAnterior(){\r\n\r\n                // return new Promise((resolve, reject) => {\r\n                        \r\n                return this._http\r\n                    .get('negociacoes/anterior')\r\n                        .then(negociacoes => { \r\n                            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n                        })\r\n                        .catch(erro => {\r\n                            console.log(erro);\r\n                            throw new Error ('Não foi possível obter as negociações da semana anterior');\r\n                    });\r\n            }\r\n\r\n\r\n        obterNegociacoesDaSemanaRetrasada(){\r\n\r\n            return new Promise((resolve, reject) => {\r\n                    \r\n                this._http\r\n                .get('negociacoes/retrasada')\r\n                    .then(negociacoes => { \r\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                    })\r\n                    .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana retrasada');\r\n                })\r\n            }); \r\n        }\r\n\r\n    envia(listaAtual){\r\n\r\n        return this._http\r\n            .post('negociacoes', negociacoes)\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    /* WATCH OUT - n1 == n2 (false - 'cause you've got an attribute that creates a new Date) \r\n                    - They are in different memory positions!\r\n                    TRY TO STRINGIFY YOUR OBJECT FIRST!!*/\r\n                    !listaAtual.some(negociacaoExistente => \r\n                        /*Must be in class Negociacao method isEquals\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))) */\r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar');\r\n            })\r\n\r\n            /*\r\n            .resolve(negociacoes => { \r\n                // resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível enviar as negociações');\r\n            })\r\n            */\r\n    }\r\n    \r\n    cadastra(negociacao){\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adiciona com sucesso')\r\n            .catch(erro => { \r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n    }\r\n\r\n    lista(){\r\n    \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações')\r\n            });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual){\r\n\r\n        return this.obterNegociacoes()\r\n            // Avoiding the user to import more than once\r\n            .then(negociacoes => \r\n                    negociacoes.filter(negociacao => \r\n                        /* WATCH OUT - n1 == n2 (false - 'cause you've got an attribute that creates a new Date) \r\n                        - They are in different memory positions!\r\n                        TRY TO STRINGIFY YOUR OBJECT FIRST!!*/\r\n                        !listaAtual.some(negociacaoExistente => \r\n                            /*Must be in class Negociacao method isEquals\r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))) */\r\n                            negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar');\r\n            })\r\n        }\r\n            /* I've Created a new method to catch all negotiations - obterNegociacoes() - \r\n                letting your method to flat your array into the class NegociacaoService.js\r\n            // Solve all promises in THIS ORDER!!!!\r\n            Promise.all([\r\n                service.obterNegociacoesDaSemana(), \r\n                service.obterNegociacoesDaSemanaAnterior(), \r\n                service.obterNegociacoesDaSemanaRetrasada()]\r\n            // If ok then do this\r\n            ).then(negociacoes => {\r\n                negociacoes\r\n                    // Transform first your array into a usable array with elements. Flatting your array!\r\n                    .reduce((flatArray, array) => flatArray.concat(array), [])\r\n                    .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                    this._mensagem.texto = 'Negociações importadas com sucesso';\r\n            }\r\n            // If there's an error to that\r\n            ).catch(error => this._mensagem.texto = error);\r\n        */\r\n                \r\n        /* IT DOESEN'T SOLVE THE ASSYNC IMPORT PROBLEM\r\n        // Promise is a future result of an operation\r\n        service.obterNegociacoesDaSemana()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociações da Semana obtida com sucesso';\r\n            })\r\n            .catch(erro => {\r\n                this._mensagem.texto = erro;\r\n            });\r\n        \r\n        service.obterNegociacoesDaSemanaAnterior()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociações da Semana Anterior obtida com sucesso';\r\n            })\r\n            .catch(erro => {\r\n                this._mensagem.texto = erro;\r\n            });\r\n            \r\n        service.obterNegociacoesDaSemanaRetrasada()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociações da Semana Retrasada obtida com sucesso';\r\n            })\r\n            .catch(erro => {\r\n                this._mensagem.texto = erro;\r\n            });\r\n        */\r\n            \r\n        /*\r\n        // Error first Method!\r\n        service.obterNegociacoesDaSemana((err, negociacoes) => {\r\n            if(err){\r\n                this._mensagem.texto = err;\r\n                return;\r\n            } \r\n\r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n            this._mensagem.texto = 'Negociações importadas com sucesso';\r\n        });\r\n        */\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}