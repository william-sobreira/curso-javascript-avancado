{"version":3,"sources":["../../app-es6/DAO/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","event","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAKQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AAEnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAEhB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;;AAEnC;AACA,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAC+B;AAD/B,6BAETO,WAFS,CAEG,MAAKP,MAFR,EAEgB;AAFhB,6BAGTQ,GAHS,CAGLP,UAHK,CAAd,CAHmC,CAMb;;AAEtB;AACA;;;;;;;;AAQA;AACAI,oCAAQI,SAAR,GAAoB,iBAAS;AACzBN;AACH,6BAFD;AAGAE,oCAAQK,OAAR,GAAkB,iBAAS;AACvBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAKH,yBA1BM,CAAP;AA2BH;;;iDAEW;AAAA;;AAER,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAEiB;AAFjB,6BAGRiB,UAHQ,EAAb,CAFoC,CAKjB;;AAEnB;AACA;;AAEA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,iBAAS;;AAExB,oCAAIU,QAAQN,MAAMC,MAAN,CAAaM,MAAzB,CAFwB,CAES;AACjC,oCAAGD,KAAH,EAAS;;AAEL,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACA;AACAP,0CAAMQ,QAAN;AAEH,iCARD,MAQO;AACHxB,4CAAQe,WAAR,EADG,CACmB;AACzB;AACJ,6BAdD;;AAgBAF,mCAAON,OAAP,GAAiB,iBAAS;;AAEtBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAO,yCAAP;AACH,6BAJD;AAKH,yBAjCM,CAAP;AAkCH;;;iDAEW;AAAA;;AAER,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAEgB;AAFhB,6BAGT4B,KAHS,EAAd,CAFoC,CAKtB;;AAEdvB,oCAAQI,SAAR,GAAoB,iBAAS;AACzBN,wCAAQ,kCAAR;AACH,6BAFD;AAGAE,oCAAQK,OAAR,GAAkB,iBAAS;AACvBC,wCAAQC,GAAR,CAAYC,MAAMC,MAAN,CAAaC,KAAzB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["/* DAO - Data Access Object - Responsible to use the methods add & listaTodos & remove\r\n    It's great to isolate the responsability of the methods which access your repository (DB)\r\n    It's part of a persistence layer that works as a facade from our IndexedDB\r\n*/\r\n\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection){\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n\r\n        return new Promise((resolve, reject) =>{\r\n\r\n            // Transaction to save inside your ObjectStore - you can read&write - obtaining your ObjectStore\r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite') // Open a connection\r\n                .objectStore(this._store) // Pick an object of this transaction\r\n                .add(negociacao); // add a negociacao\r\n            \r\n            // #### VAI CANCELAR A TRANSAÇÃO. O evento onabort será chamado.\r\n            /*\r\n            transaction.abort(); \r\n            transaction.onabort = e => {\r\n                console.log(e);\r\n                console.log('Transação abortada');\r\n            };\r\n            */\r\n\r\n            // If the request has been successful onsuccess - For the NegociacaoController resolve() \r\n            request.onsuccess = event => {\r\n                resolve();\r\n            };\r\n            request.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject('Não foi possível adicionar a negociação!');\r\n            };\r\n\r\n        });\r\n    }\r\n\r\n    listaTodos(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store) // Place where you store your js objects\r\n                .openCursor(); // Parse through your objectStore\r\n            \r\n            // To iterate through your store (objectStore('negociacoes')) - needs a cursor\r\n            // A Pointer is a type of data which stores a local place in your memory with an address\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = event => {\r\n\r\n                let atual = event.target.result; // It's a pointer\r\n                if(atual){\r\n                    \r\n                    let dado = atual.value;\r\n                    \r\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    // Needed to keep iterating through your objectStore\r\n                    atual.continue();\r\n\r\n                } else {\r\n                    resolve(negociacoes); // Return a array filled with your negotiations!\r\n                }\r\n            };\r\n\r\n            cursor.onerror = event => {\r\n\r\n                console.log(event.target.error);\r\n                reject('Não foi possível listar as negociações!');\r\n            };\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store) // Place where you store your js objects\r\n                .clear(); // Clear your object store\r\n\r\n            request.onsuccess = event => {\r\n                resolve('Negociações apagadas com sucesso');\r\n            };\r\n            request.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject('Não foi possível apagar as negociações');\r\n            };\r\n        });\r\n    }\r\n\r\n}"]}