{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","event","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjecStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAGCC,iB;AACb;AACA;AACA;;AAEA,6CAAa;AAAA;;AAET,0BAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACA;AACAS,wCAAYI,eAAZ,GAA8B,iBAAS;;AAEnCT,kDAAkBU,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,iBAAS;AAC7B;AACA,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,MAAMC,MAAN,CAAaC,MAA1B;AACA;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAHY,CAG+B;AAC3CA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAW,4CAAX,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAXD;;AAaAO,wCAAYW,OAAZ,GAAsB,iBAAS;;AAE3BC,wCAAQC,GAAR,CAAYP,MAAMC,MAAN,CAAaO,KAAzB;AACAf,uCAAOO,MAAMC,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACH,6BAJD;AAMH,yBA5BM,CAAP;AA6BH;;;kDAEoBtB,U,EAAW;AAAE;;AAE9B;AACAH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,gBAAX,CAA4BD,KAA5B;AACJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAJD;AAMH;;;sDACuB;;AAEpB,4BAAG7B,UAAH,EAAc;AACVC;AACA;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["// MODULE PATTERN - Making sure your connection is the same!\r\n\r\n\r\n// var ConnectionFactory = (function () { - Working with modules! import and export \r\n    \r\n// These \"global\" variables just exist inside the anonymous function \r\n// CONST!!! You can't assign a new value directly!\r\nconst stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\n// A class inside a function must return something - MODULE PATTERN\r\nexport class ConnectionFactory {\r\n// Must be a static method and return a Promise\r\n// connection must be the same as the previous one ALWAYS\r\n// Connection must be closed by NO ONE !!!! Just by the class ConnectionFactory\r\n\r\nconstructor(){\r\n\r\n    throw new Error('Não é possível criar instâncias de ConnectionFactory!');\r\n}\r\n\r\nstatic getConnection(){\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n        // TRIAD!!\r\n        openRequest.onupgradeneeded = event => {\r\n        \r\n            ConnectionFactory._createStores(event.target.result); \r\n        };\r\n        \r\n        openRequest.onsuccess = event => {\r\n            // Ensure your connection is UNIQUE!\r\n            if(!connection) {\r\n                connection = event.target.result; \r\n                // MONKEY PATCH - Forces a modification in an API - Destroy the method connection.close()\r\n                close = connection.close.bind(connection); // You must store the method before you destroy it to call it after. And must bind it!\r\n                connection.close = function() {\r\n                    throw new Error ('Você não pode fechar diretamente a conexão');\r\n                }\r\n            }\r\n            resolve(connection);\r\n        };\r\n        \r\n        openRequest.onerror = event => {\r\n            \r\n            console.log(event.target.error);\r\n            reject(event.target.error.name);\r\n        };\r\n        \r\n    });\r\n}\r\n\r\nstatic _createStores(connection){ // connection = event.target.result\r\n\r\n    // Checks if the store has been already created - true? then delete each store!\r\n    stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store)) \r\n            connection.deleteObjecStore(store);\r\n        connection.createObjectStore(store, { autoIncrement: true });\r\n    });\r\n    \r\n}\r\nstatic closeConnection(){\r\n\r\n    if(connection){\r\n        close();\r\n        // To reset the connection status and able to GET a new connection\r\n        connection = null;\r\n    }\r\n}\r\n}\r\n// }) (); // Here you call your anonymous function - it's a self-invoked function\r\n"]}