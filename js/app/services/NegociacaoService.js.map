{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","Negociacao","NegociacaoDao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","resolve","reject","get","map","Date","objeto","data","quantidade","valor","console","log","listaAtual","post","filter","some","negociacao","isEquals","negociacaoExistente","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","obterNegociacoes"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from '../services/ConnectionFactory';\r\nimport {Negociacao} from '../models/Negociacao';\r\nimport {NegociacaoDao} from '../DAO/NegociacaoDao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor(){\r\n        \r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(), \r\n            this.obterNegociacoesDaSemanaAnterior(), \r\n            this.obterNegociacoesDaSemanaRetrasada()]\r\n        // If ok then do this\r\n        )\r\n        .then(periodos => {\r\n            // Transform first your array into a usable array with elements. Flatting your array!\r\n            let negociacoes = periodos.reduce((dados, periodo) => dados.concat(periodo), [])\r\n            return negociacoes;\r\n        })\r\n        // If there's an error to that\r\n        .catch(erro => {\r\n            throw new Error(erro)\r\n        });\r\n    }\r\n\r\n        obterNegociacoesDaSemana(){\r\n            \r\n            return new Promise((resolve, reject) => {\r\n                \r\n                this._http\r\n                .get('negociacoes/semana')\r\n                    .then(negociacoes => { \r\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                    })\r\n                    .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana');\r\n                    })\r\n            }); \r\n        }\r\n        \r\n        /* CALLBACK ERROR-FIST METHOD!!\r\n        // cb = call back function - Substituted by PROMISE PATTERN\r\n        obterNegociacoesDaSemana(){\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'negociacoes/semana');\r\n                xhr.onreadystatechange = () => {\r\n                    if(xhr.readyState == 4) {\r\n                        if (xhr.status == 200){ \r\n                            cb(null, JSON.parse(xhr.responseText)\r\n                                .map(objeto => \r\n                                    new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)\r\n                                ))\r\n                                \r\n                        } else {\r\n                            console.log(xhr.responseText);\r\n                            cb('Não foi possível obter as negociações', null);\r\n                        }\r\n                    }\r\n                };\r\n            xhr.send();\r\n        }\r\n        */\r\n\r\n        obterNegociacoesDaSemanaAnterior(){\r\n\r\n                // return new Promise((resolve, reject) => {\r\n                        \r\n                return this._http\r\n                    .get('negociacoes/anterior')\r\n                        .then(negociacoes => { \r\n                            return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\r\n                        })\r\n                        .catch(erro => {\r\n                            console.log(erro);\r\n                            throw new Error ('Não foi possível obter as negociações da semana anterior');\r\n                    });\r\n            }\r\n\r\n\r\n        obterNegociacoesDaSemanaRetrasada(){\r\n\r\n            return new Promise((resolve, reject) => {\r\n                    \r\n                this._http\r\n                .get('negociacoes/retrasada')\r\n                    .then(negociacoes => { \r\n                        resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n                    })\r\n                    .catch(erro => {\r\n                        console.log(erro);\r\n                        reject('Não foi possível obter as negociações da semana retrasada');\r\n                })\r\n            }); \r\n        }\r\n\r\n    envia(listaAtual){\r\n\r\n        return this._http\r\n            .post('negociacoes', negociacoes)\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    /* WATCH OUT - n1 == n2 (false - 'cause you've got an attribute that creates a new Date) \r\n                    - They are in different memory positions!\r\n                    TRY TO STRINGIFY YOUR OBJECT FIRST!!*/\r\n                    !listaAtual.some(negociacaoExistente => \r\n                        /*Must be in class Negociacao method isEquals\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))) */\r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar');\r\n            })\r\n\r\n            /*\r\n            .resolve(negociacoes => { \r\n                // resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)))\r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível enviar as negociações');\r\n            })\r\n            */\r\n    }\r\n    \r\n    cadastra(negociacao){\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adiciona com sucesso')\r\n            .catch(erro => { \r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            });\r\n    }\r\n\r\n    lista(){\r\n    \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações')\r\n            });\r\n    }\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual){\r\n\r\n        return this.obterNegociacoes()\r\n            // Avoiding the user to import more than once\r\n            .then(negociacoes => \r\n                    negociacoes.filter(negociacao => \r\n                        /* WATCH OUT - n1 == n2 (false - 'cause you've got an attribute that creates a new Date) \r\n                        - They are in different memory positions!\r\n                        TRY TO STRINGIFY YOUR OBJECT FIRST!!*/\r\n                        !listaAtual.some(negociacaoExistente => \r\n                            /*Must be in class Negociacao method isEquals\r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente))) */\r\n                            negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar');\r\n            })\r\n        }\r\n            /* I've Created a new method to catch all negotiations - obterNegociacoes() - \r\n                letting your method to flat your array into the class NegociacaoService.js\r\n            // Solve all promises in THIS ORDER!!!!\r\n            Promise.all([\r\n                service.obterNegociacoesDaSemana(), \r\n                service.obterNegociacoesDaSemanaAnterior(), \r\n                service.obterNegociacoesDaSemanaRetrasada()]\r\n            // If ok then do this\r\n            ).then(negociacoes => {\r\n                negociacoes\r\n                    // Transform first your array into a usable array with elements. Flatting your array!\r\n                    .reduce((flatArray, array) => flatArray.concat(array), [])\r\n                    .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                    this._mensagem.texto = 'Negociações importadas com sucesso';\r\n            }\r\n            // If there's an error to that\r\n            ).catch(error => this._mensagem.texto = error);\r\n        */\r\n                \r\n        /* IT DOESEN'T SOLVE THE ASSYNC IMPORT PROBLEM\r\n        // Promise is a future result of an operation\r\n        service.obterNegociacoesDaSemana()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociações da Semana obtida com sucesso';\r\n            })\r\n            .catch(erro => {\r\n                this._mensagem.texto = erro;\r\n            });\r\n        \r\n        service.obterNegociacoesDaSemanaAnterior()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociações da Semana Anterior obtida com sucesso';\r\n            })\r\n            .catch(erro => {\r\n                this._mensagem.texto = erro;\r\n            });\r\n            \r\n        service.obterNegociacoesDaSemanaRetrasada()\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao))\r\n                this._mensagem.texto = 'Negociações da Semana Retrasada obtida com sucesso';\r\n            })\r\n            .catch(erro => {\r\n                this._mensagem.texto = erro;\r\n            });\r\n        */\r\n            \r\n        /*\r\n        // Error first Method!\r\n        service.obterNegociacoesDaSemana((err, negociacoes) => {\r\n            if(err){\r\n                this._mensagem.texto = err;\r\n                return;\r\n            } \r\n\r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n            this._mensagem.texto = 'Negociações importadas com sucesso';\r\n        });\r\n        */\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]}