{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","isFunction","console","log","retorno","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CAEKC,M,EAAQC,K,EAAOC,I,EAAM;;AAE/B,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AAGrBI,+BAHqB,eAGjBC,MAHiB,EAGTC,IAHS,EAGHC,QAHG,EAGM;AACvB;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,UAAb,CAAwBJ,OAAOC,IAAP,CAAxB,CAA3B,EAAkE;AAC9D;AACA,2CAAO,YAAU;AACbI,gDAAQC,GAAR,uBAAgCL,IAAhC;AACA;;;AAGA,4CAAIM,UAAUC,QAAQC,KAAR,CAAcT,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCU,SAApC,CAAd;AACAb,6CAAKG,MAAL;AACA,+CAAOO,OAAP;AACH,qCARD;AAUH,iCAZD,MAYK;AACD;AACA,2CAAOC,QAAQT,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACH;AACJ,6BArBoB;AAuBrBS,+BAvBqB,eAuBjBX,MAvBiB,EAuBTC,IAvBS,EAuBHW,KAvBG,EAuBIV,QAvBJ,EAuBa;AAC9B,oCAAIK,UAAUC,QAAQG,GAAR,CAAYX,MAAZ,EAAoBC,IAApB,EAA0BW,KAA1B,EAAiCV,QAAjC,CAAd;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,CAAH,EAAwB;AACpBJ,yCAAKG,MAAL,EADoB,CACN;AACjB;AACD,uCAAOO,OAAP,CAL8B,CAKd;AACnB;AA7BoB,yBAAlB,CAAP;AAgCH;;;+CAEiBM,I,EAAK;;AAEnB,+BAAO,QAAOA,IAAP,yCAAOA,IAAP,cAAuBC,QAAvB,yCAAuBA,QAAvB,EAAP;AACH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\r\n\r\n    static create(objeto, props, acao) {\r\n\r\n        return new Proxy(objeto, {\r\n            //FOR METHODS!!!! GET\r\n            //target = real object | prop = property being accessed | receiver = reference for your proxy\r\n            get(target, prop, receiver){\r\n                // Method adiciona & esvazia includes a property? && add/esvazia == function?\r\n                if(props.includes(prop) && ProxyFactory.isFunction(target[prop])) {\r\n                    // Must be function. This DYNAMIC\r\n                    return function(){\r\n                        console.log(`interceptando um ${prop}`);\r\n                        /* arguments is a var that allows you to access all parameters of a calling function\r\n                        You've stored \"retorno\" 'cause you need to keep it to return it\r\n                        */\r\n                        let retorno = Reflect.apply(target[prop], target, arguments);\r\n                        acao(target);\r\n                        return retorno;\r\n                    }\r\n\r\n                }else{\r\n                    // Return the value of the property (target, prop[, receiver])\r\n                    return Reflect.get(target, prop, receiver);\r\n                }\r\n            }, \r\n            //FOR PROPERTIES!!!! SET\r\n            set(target, prop, value, receiver){\r\n                let retorno = Reflect.set(target, prop, value, receiver);\r\n                if(props.includes(prop)){\r\n                    acao(target); // Execute the action on your target (object)             \r\n                }\r\n                return retorno; // Change the property\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    static isFunction(func){\r\n\r\n        return typeof(func) == typeof(Function);\r\n    }\r\n\r\n}"]}