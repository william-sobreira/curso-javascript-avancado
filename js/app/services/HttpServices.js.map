{"version":3,"sources":["../../app-es6/services/HttpServices.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,G,EAAK;;AAEf,4BAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAWF,IAAIG,UAAf,CAAN;AACZ,+BAAOH,GAAP;AACH;;;wCAEGI,G,EAAK;AAAA;;AAEL;AACA,+BAAOC,MAAMD,GAAN;AACH;AADG,yBAEFE,IAFE,CAEG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBAFH,EAGFM,IAHE,CAGG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAHH,CAAP;AAII;;;;;;;;;AAUJ;;;;;;;;;;;;;;;;;;;;;;;;;AA4BH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACd;AACAM,qCAAS,EAAC,gBAAiB,kBAAlB,EAFK;AAGdC,oCAAQ,MAHM;AAIdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf,CAJQ,CAIa;AAJb,yBAAX,EAMNH,IANM,CAMD;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBANC,CAAP;;AAQA;;;;;;;;;;;;;;;;;AAsBH","file":"HttpServices.js","sourcesContent":["export class HttpService {\r\n\r\n    _handleErrors(res) {\r\n\r\n        if(!res.ok) throw new Error (res.statusText);\r\n        return res;\r\n    }\r\n\r\n    get(url) {\r\n\r\n        // Substitute the whole code before\r\n        return fetch(url)\r\n            // Promise (resolve, reject)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n            /*.then(res => {\r\n                if(res.ok) { // res.ok = assures you that the request was successful!\r\n                    return res.json(); // Substitute JSON.parse\r\n                } else {\r\n                    throw new Error\r\n                }\r\n            } \r\n            */\r\n\r\n\r\n        /*\r\n        // Returns a future result - resolve (code if OK) - OR - return reject (code if something went wrong)\r\n        return new Promise((resolve, reject) =>{\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            // Type of your request / Address or URL to get\r\n            xhr.open('GET', url);\r\n    \r\n                // Configurations before to send it\r\n                \r\n                // Everytime your xhr status has changed execute a function\r\n    \r\n                // 0: Requist not initiated / 1: Server connection has been estabilished\r\n                // 2: Request received / 3: Processing request / 4: Request concluded - response is ready \r\n                xhr.onreadystatechange = () => {\r\n                    if(xhr.readyState == 4) {\r\n                        if (xhr.status == 200){ // Operation is OKAY \r\n                            // JSON.parse(xhr.resonseText()) - Convert the text into an JS object\r\n                            resolve(JSON.parse(xhr.responseText))\r\n                        } else {\r\n                            reject(xhr.responseText);\r\n                        }\r\n                    }\r\n                };\r\n            // To execute the operation you need to send it\r\n            xhr.send();\r\n        });\r\n        */\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n            // Object = dado\r\n            headers: {'Content-type' : 'application/json'},\r\n            method: 'post', \r\n            body: JSON.stringify(dado) // who you're posting\r\n        })\r\n        .then(res => this._handleErrors(res));\r\n\r\n        /*\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // JSON.stringify converts an object into a string (format JSON)\r\n        });\r\n        */\r\n    }\r\n}\r\n\r\n"]}